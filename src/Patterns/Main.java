package Patterns;

import Patterns.Behavioral.ChainOfResponsibility.*;
import Patterns.Behavioral.Command.*;
import Patterns.Behavioral.Iterator.Tour;
import Patterns.Behavioral.Iterator.TourIterator;
import Patterns.Behavioral.Iterator.TourList;
import Patterns.Behavioral.Mediator.TravelMediator;
import Patterns.Behavioral.Memento.Booking;
import Patterns.Behavioral.Memento.HistoryKeeper;
import Patterns.Behavioral.Observer.FlightBookingAgent;
import Patterns.Behavioral.Observer.HotelBookingAgent;
import Patterns.Behavioral.Observer.TravelEventManager;
import Patterns.Behavioral.State.JourneyContext;
import Patterns.Behavioral.Strategy.RailTravel;
import Patterns.Behavioral.Strategy.RoadTravel;
import Patterns.Behavioral.Strategy.TravelByPlane;
import Patterns.Behavioral.Strategy.TravelPlanner;
import Patterns.Behavioral.TemplateMethod.BeachTravel;
import Patterns.Behavioral.TemplateMethod.TravelTemp;
import Patterns.Behavioral.TemplateMethod.MountainTravel;
import Patterns.Behavioral.Visitor.*;
import Patterns.Creational.Builder.AdventureTripBuilder;
import Patterns.Creational.Builder.BeachTripBuilder;
import Patterns.Creational.Builder.Director;
import Patterns.Creational.Factory.Abstract.*;
import Patterns.Creational.Factory.Method.TravelPackageFactory;
import Patterns.Creational.Factory.Method.TravelPackageFactoryCreator;
import Patterns.Creational.Factory.Method.TravelPackageType;
import Patterns.Creational.Prototype.Apartment;
import Patterns.Creational.Prototype.ApartmentPrototype;
import Patterns.Creational.Singleton.TravelAgency;
import Patterns.Structural.Adapter.CurrencyAdapter;
import Patterns.Structural.Adapter.CurrencyInterface;
import Patterns.Structural.Adapter.EuroCurrency;
import Patterns.Structural.Bridge.*;
import Patterns.Structural.Composite.Service;
import Patterns.Structural.Decorator.*;
import Patterns.Structural.Facade.TravelPackageFacade;
import Patterns.Structural.Flyweight.BookingContext;
import Patterns.Structural.Flyweight.DestinationFactory;
import Patterns.Structural.Flyweight.DestinationFlyweight;
import Patterns.Structural.Proxy.BookingService;
import Patterns.Structural.Proxy.BookingServiceProxy;

public class Main {
    public static void main(String[] args) {
        System.out.println("----------Singleton begin----------");
        TravelAgency travelAgency = TravelAgency.getInstance();
        travelAgency.listDestinations();
        travelAgency.bookTrip("Paris");
        travelAgency.addDestination("Singapore");
        travelAgency.listDestinations();
        travelAgency.bookTrip("Singapore");
        System.out.println("----------Singleton end----------");
        System.out.println();
        System.out.println("----------Builder begin----------");
        Director director = new Director();
        AdventureTripBuilder builder = new AdventureTripBuilder();
        director.buildAdventureTrip(builder);
        System.out.println(builder.build());
        AdventureTripBuilder builder2 = new AdventureTripBuilder();
        director.buildAdventureTrip(builder2);
        builder2.activity("Snowboarding").duration(2).transportation("Train");
        System.out.println(builder2.build());
        BeachTripBuilder builder3 = new BeachTripBuilder();
        director.buildBeachTrip(builder3);
        System.out.println(builder3.build());
        System.out.println("----------Builder end----------");
        System.out.println();
        System.out.println("----------Prototype begin----------");
        ApartmentPrototype apartmentPrototype = new Apartment("New York", 3, 2000);
        Apartment apartmentClone = (Apartment) apartmentPrototype.clone();
        if (apartmentPrototype != apartmentClone) {
            System.out.println("Objects are not the same! Yeah!");
        }
        if (apartmentPrototype.equals(apartmentClone)) {
            System.out.println("Objects are identical! Yeah!");
        }
        System.out.println("----------Prototype end----------");
        System.out.println();
        System.out.println("----------Factory begin----------");
        TravelPackageFactory internationalFactory = TravelPackageFactoryCreator.createFactory(TravelPackageType.INTERNATIONAL);
        internationalFactory.displayDetails();
        TravelPackageFactory cruiseFactory = TravelPackageFactoryCreator.createFactory(TravelPackageType.CRUISE);
        cruiseFactory.displayDetails();
        TravelPackageFactory adventureFactory = TravelPackageFactoryCreator.createFactory(TravelPackageType.ADVENTURE);
        adventureFactory.displayDetails();
        System.out.println("----------Factory end----------");
        System.out.println();
        System.out.println("----------Abstract factory begin----------");
        AbstractPackageFactory localFactory = FactoryCreator.getFactory(Type.LOCAL);
        Flight localFlight = localFactory.createFlight();
        Hotel localHotel = localFactory.createHotel();
        System.out.println(localFlight.getFlightDetails());
        System.out.println(localHotel.getHotelDetails());
        AbstractPackageFactory abroadFactory = FactoryCreator.getFactory(Type.ABROAD);
        Flight abroadFlight = abroadFactory.createFlight();
        Hotel abroadHotel = abroadFactory.createHotel();
        System.out.println(abroadFlight.getFlightDetails());
        System.out.println(abroadHotel.getHotelDetails());
        System.out.println("----------Abstract factory end----------");
        System.out.println();
        System.out.println("----------Adapter begin----------");
        EuroCurrency euro = new EuroCurrency();
        CurrencyInterface currencyAdapter = new CurrencyAdapter(euro);
        euro.setEuros(100);
        System.out.println("100 Euros =" + currencyAdapter.getCurrencyInUSD() + " USD");
        currencyAdapter.setCurrencyInUSD(100);
        System.out.println("100 USD =" + euro.getEuros() + " Euros");
        System.out.println("----------Adapter end----------");
        System.out.println();
        System.out.println("----------Bridge begin----------");
        TravelType airTravelOnline = new AirTravel(new OnlineBookingSystem());
        System.out.println(airTravelOnline.arrangeTravel());
        System.out.println("Price: $" + airTravelOnline.calculatePrice());
        TravelType cruiseTravelAgent = new CruiseTravel(new AgentBookingSystem());
        System.out.println(cruiseTravelAgent.arrangeTravel());
        System.out.println("Price: $" + cruiseTravelAgent.calculatePrice());
        System.out.println("----------Bridge end----------");
        System.out.println();
        System.out.println("----------Composite begin----------");
        Service flight = new Service("Flight", 200.00);
        Service hotel = new Service("Hotel", 100.00);
        Service tour = new Service("City Tour", 50.00);
        Patterns.Structural.Composite.TravelPackage honeymoonTravelPackage = new Patterns.Structural.Composite.TravelPackage("Honeymoon Package");
        Patterns.Structural.Composite.TravelPackage adventureTravelPackage = new Patterns.Structural.Composite.TravelPackage("Adventure Package");
        honeymoonTravelPackage.add(flight);
        honeymoonTravelPackage.add(hotel);
        adventureTravelPackage.add(flight);
        adventureTravelPackage.add(tour);
        Patterns.Structural.Composite.TravelPackage travelPackage = new Patterns.Structural.Composite.TravelPackage("Travel Package");
        travelPackage.add(honeymoonTravelPackage);
        travelPackage.add(adventureTravelPackage);
        travelPackage.displayServiceDetails();
        System.out.println("----------Composite end----------");
        System.out.println();
        System.out.println("----------Decorator begin----------");
        TripPlan standardTrip = new StandardTripPlan();
        System.out.println(standardTrip.getDescription() + " Cost: $" + standardTrip.cost());
        TripPlan flightAndHotelTrip = new HotelBookingDecorator(new FlightBookingDecorator(new StandardTripPlan()));
        System.out.println(flightAndHotelTrip.getDescription() + " Cost: $" + flightAndHotelTrip.cost());
        TripPlan allInclusiveTrip = new InsuranceDecorator(new HotelBookingDecorator(new FlightBookingDecorator(new StandardTripPlan())));
        System.out.println(allInclusiveTrip.getDescription() + " Cost: $" + allInclusiveTrip.cost());
        System.out.println("----------Decorator end----------");
        System.out.println();
        System.out.println("----------Facade begin----------");
        TravelPackageFacade travelPackageExample = new TravelPackageFacade();
        travelPackageExample.bookTravelPackage("New York", "Los Angeles", "2024-05-15", "Hotel California", "2024-05-15", "2024-05-20", "2024-05-15", "2024-05-20");
        System.out.println("----------Facade end----------");
        System.out.println();
        System.out.println("----------Flyweight begin----------");
        DestinationFlyweight destination1 = DestinationFactory.getDestination("Eiffel Tower", "Famous French tower", "Paris, France");
        BookingContext booking1 = new BookingContext("John Doe", "2024-04-09", destination1);
        booking1.displayDetails();
        DestinationFlyweight destination2 = DestinationFactory.getDestination("Eiffel Tower", "Famous French tower", "Paris, France");
        BookingContext booking2 = new BookingContext("Billie Jean", "2024-05-10", destination2);
        booking2.displayDetails();
        System.out.println("----------Flyweight end----------");
        System.out.println();
        System.out.println("----------Proxy begin----------");
        BookingService bookingService = new BookingServiceProxy();
        bookingService.bookFlight("Paris");
        bookingService.bookFlight("Mars");
        System.out.println("----------Proxy end----------");
        System.out.println();
        System.out.println("----------Chain of Responsibility begin----------");
        Handler chain = new BudgetHandler(new DestinationHandler(new InsuranceHandler(null)));
        Request request = new Request(1200, "beach", true);
        chain.handleRequest(request);
        System.out.println("----------Chain of Responsibility end----------");
        System.out.println();
        System.out.println("----------Command begin----------");
        TravelPackage europeTour = new TourPackage("Europe");
        TravelPackage asiaTour = new TourPackage("Asia");
        Command bookEuropeTour = new BookTravelPackage(europeTour);
        Command bookAsiaTour = new BookTravelPackage(asiaTour);
        TravelAgent agent = new TravelAgent();
        agent.setCommand(bookEuropeTour);
        agent.executeCommand();
        agent.setCommand(bookAsiaTour);
        agent.executeCommand();
        System.out.println("----------Command end----------");
        System.out.println();
        System.out.println("----------Iterator begin----------");
        TourList tourList = new TourList();
        tourList.addTour(new Tour("Safari in Kenya", 2500));
        tourList.addTour(new Tour("Tour in Paris", 1200));
        tourList.addTour(new Tour("Visit North Korea", 100));
        TourIterator iterator = tourList.iterator();
        while (iterator.hasNext()) {
            System.out.println(iterator.next());
        }
        System.out.println("Reversed Iterator:");
        while (iterator.hasPrevious()) {
            System.out.println(iterator.previous());
        }
        System.out.println("----------Iterator end----------");
        System.out.println();
        System.out.println("----------Mediator begin----------");
        TravelMediator mediator = new TravelMediator();
        mediator.book("flight");
        mediator.book("hotel");
        mediator.book("car");
        System.out.println("----------Mediator end----------");
        System.out.println();
        System.out.println("----------Memento begin----------");
        Booking booking = new Booking();
        HistoryKeeper keeper = new HistoryKeeper(booking);
        booking.addBooking("Flight: NYC to Paris");
        keeper.backup();
        booking.addBooking("Hotel: Paris Hilton");
        keeper.backup();
        booking.addBooking("Car Rental: Compact car");
        System.out.println("Current Bookings:");
        booking.getBookings().forEach(System.out::println);
        keeper.undo();
        System.out.println("Bookings after undo:");
        booking.getBookings().forEach(System.out::println);
        System.out.println("----------Memento end----------");
        System.out.println();
        System.out.println("----------Observer begin----------");
        TravelEventManager eventManager = new TravelEventManager("flight", "hotel");
        FlightBookingAgent flightAgent = new FlightBookingAgent("FlightAgent1");
        HotelBookingAgent hotelAgent = new HotelBookingAgent("HotelAgent1");
        eventManager.subscribe("flight", flightAgent);
        eventManager.subscribe("hotel", hotelAgent);
        eventManager.notify("flight", "New flight available to Paris");
        eventManager.notify("hotel", "Special discount on hotels in London");
        eventManager.unsubscribe("flight", flightAgent);
        eventManager.notify("flight", "New flight available to Rome");
        System.out.println("----------Observer end----------");
        System.out.println();
        System.out.println("----------State begin----------");
        JourneyContext journey = new JourneyContext();
        System.out.println(journey.getState().onStart());
        System.out.println(journey.getState().onNext());
        System.out.println(journey.getState().onCancel());
        System.out.println("----------State end----------");
        System.out.println();
        System.out.println("----------Strategy begin----------");
        TravelPlanner planner = new TravelPlanner(new TravelByPlane());
        planner.planTrip("New York", "London");
        planner.setTravelStrategy(new RailTravel());
        planner.planTrip("Paris", "Berlin");
        planner.setTravelStrategy(new RoadTravel());
        planner.planTrip("San Francisco", "Los Angeles");
        System.out.println("----------Strategy end----------");
        System.out.println();
        System.out.println("----------TemplateMethod begin----------");
        TravelTemp beachTravelTemp = new BeachTravel("Mykola Kolotylo");
        TravelTemp mountainTravelTemp = new MountainTravel("Vasyl Anshakov");
        beachTravelTemp.bookVacation();
        mountainTravelTemp.bookVacation();
        System.out.println("----------TemplateMethod end----------");
        System.out.println();
        System.out.println("----------Visitor begin----------");
        TravelElement city = new CityVisit("New York");
        TravelElement safari = new SafariAdventure("Egypt");
        TravelElement beach = new BeachHoliday("Maldives");
        Planner route = new RoutePlanner();
        Planner costEstimate = new CostEstimator();
        System.out.println(city.accept(route));
        System.out.println(safari.accept(costEstimate));
        System.out.println(beach.accept(costEstimate));
        System.out.println("----------Visitor end----------");
        System.out.println();
    }
}

